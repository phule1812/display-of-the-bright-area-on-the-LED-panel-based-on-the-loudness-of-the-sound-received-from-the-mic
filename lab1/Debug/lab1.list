
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a2c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bdc  08003bdc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be4  08003be4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000010  08003bfc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003bfc  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fba7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b8  00000000  00000000  0002fbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  000320a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00032ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017df1  00000000  00000000  00033bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b24  00000000  00000000  0004b9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098cb3  00000000  00000000  0005c4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5188  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c8  00000000  00000000  000f51d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003bac 	.word	0x08003bac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003bac 	.word	0x08003bac

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <drawPixel>:
#include "../inc/P10.h"

P10ErrorCode drawPixel(Pixel pix, uint8_t *spiFrame16, P10ABMux AB) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	81b8      	strh	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	4613      	mov	r3, r2
 80004e8:	71fb      	strb	r3, [r7, #7]

	P10ErrorCode check = checkPixelData(&pix);
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f839 	bl	8000566 <checkPixelData>
 80004f4:	4603      	mov	r3, r0
 80004f6:	75fb      	strb	r3, [r7, #23]

	if (check != P10EC_OK) {
 80004f8:	7dfb      	ldrb	r3, [r7, #23]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d12e      	bne.n	800055c <drawPixel+0x80>

	}
	else {

		uint8_t jy = pix.y % 4;
 80004fe:	7b7b      	ldrb	r3, [r7, #13]
 8000500:	f003 0303 	and.w	r3, r3, #3
 8000504:	75bb      	strb	r3, [r7, #22]
		if (jy  == AB) {
 8000506:	7dba      	ldrb	r2, [r7, #22]
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	429a      	cmp	r2, r3
 800050c:	d126      	bne.n	800055c <drawPixel+0x80>
			uint8_t iy = pix.y / 4;
 800050e:	7b7b      	ldrb	r3, [r7, #13]
 8000510:	089b      	lsrs	r3, r3, #2
 8000512:	757b      	strb	r3, [r7, #21]
			uint8_t jx = pix.x % 8;
 8000514:	7b3b      	ldrb	r3, [r7, #12]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	753b      	strb	r3, [r7, #20]
			uint8_t ix = pix.x / 8;
 800051c:	7b3b      	ldrb	r3, [r7, #12]
 800051e:	08db      	lsrs	r3, r3, #3
 8000520:	74fb      	strb	r3, [r7, #19]

			spiFrame16[ix * 4 + iy] &= ~(1 << (7 - jx));
 8000522:	7cfb      	ldrb	r3, [r7, #19]
 8000524:	009a      	lsls	r2, r3, #2
 8000526:	7d7b      	ldrb	r3, [r7, #21]
 8000528:	4413      	add	r3, r2
 800052a:	461a      	mov	r2, r3
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	4413      	add	r3, r2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b25a      	sxtb	r2, r3
 8000534:	7d3b      	ldrb	r3, [r7, #20]
 8000536:	f1c3 0307 	rsb	r3, r3, #7
 800053a:	2101      	movs	r1, #1
 800053c:	fa01 f303 	lsl.w	r3, r1, r3
 8000540:	b25b      	sxtb	r3, r3
 8000542:	43db      	mvns	r3, r3
 8000544:	b25b      	sxtb	r3, r3
 8000546:	4013      	ands	r3, r2
 8000548:	b259      	sxtb	r1, r3
 800054a:	7cfb      	ldrb	r3, [r7, #19]
 800054c:	009a      	lsls	r2, r3, #2
 800054e:	7d7b      	ldrb	r3, [r7, #21]
 8000550:	4413      	add	r3, r2
 8000552:	461a      	mov	r2, r3
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	4413      	add	r3, r2
 8000558:	b2ca      	uxtb	r2, r1
 800055a:	701a      	strb	r2, [r3, #0]

		}

	}

	return check;
 800055c:	7dfb      	ldrb	r3, [r7, #23]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <checkPixelData>:
		}
	}
	return check;
}

P10ErrorCode checkPixelData(const Pixel *pix) {
 8000566:	b480      	push	{r7}
 8000568:	b085      	sub	sp, #20
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]

	P10ErrorCode returnValue = P10EC_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]

	if (pix->x < 32 && pix->y < 16) {
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b1f      	cmp	r3, #31
 8000578:	d803      	bhi.n	8000582 <checkPixelData+0x1c>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	785b      	ldrb	r3, [r3, #1]
 800057e:	2b0f      	cmp	r3, #15
 8000580:	d913      	bls.n	80005aa <checkPixelData+0x44>



	}
	else {
		if (pix->x >= 32 && pix->y >= 16) {
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b1f      	cmp	r3, #31
 8000588:	d906      	bls.n	8000598 <checkPixelData+0x32>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	2b0f      	cmp	r3, #15
 8000590:	d902      	bls.n	8000598 <checkPixelData+0x32>
			returnValue = P10EC_DATA_RANGE_ERROR;
 8000592:	2303      	movs	r3, #3
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	e008      	b.n	80005aa <checkPixelData+0x44>
		}
		else
		{
			if (pix->x >= 32) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b1f      	cmp	r3, #31
 800059e:	d902      	bls.n	80005a6 <checkPixelData+0x40>
				returnValue = P10EC_X_RANGE_ERROR;
 80005a0:	2301      	movs	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	e001      	b.n	80005aa <checkPixelData+0x44>
			}
			else {
				returnValue = P10EC_Y_RANGE_ERROR;
 80005a6:	2302      	movs	r3, #2
 80005a8:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return returnValue;
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <clearScreen>:

void clearScreen(uint8_t *spiFrame16)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 16; i++) {
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e007      	b.n	80005d6 <clearScreen+0x1e>
		spiFrame16[i] = 0xff;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	22ff      	movs	r2, #255	; 0xff
 80005ce:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 16; i++) {
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	3301      	adds	r3, #1
 80005d4:	73fb      	strb	r3, [r7, #15]
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d9f4      	bls.n	80005c6 <clearScreen+0xe>
	}
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x98>)
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x98>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x98>)
 800064e:	f000 fecb 	bl	80013e8 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f000 fb78 	bl	8000d4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800065c:	2308      	movs	r3, #8
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x98>)
 800066e:	f001 f9ad 	bl	80019cc <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f000 fb68 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000002c 	.word	0x2000002c
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <HAL_ADC_MspInit+0x8c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d12f      	bne.n	8000712 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <HAL_ADC_MspInit+0x90>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a19      	ldr	r2, [pc, #100]	; (8000720 <HAL_ADC_MspInit+0x90>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_ADC_MspInit+0x90>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <HAL_ADC_MspInit+0x90>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <HAL_ADC_MspInit+0x90>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <HAL_ADC_MspInit+0x90>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ea:	2301      	movs	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4809      	ldr	r0, [pc, #36]	; (8000724 <HAL_ADC_MspInit+0x94>)
 80006fe:	f001 fcaf 	bl	8002060 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2012      	movs	r0, #18
 8000708:	f001 fc73 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800070c:	2012      	movs	r0, #18
 800070e:	f001 fc8c 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012000 	.word	0x40012000
 8000720:	40023800 	.word	0x40023800
 8000724:	40020400 	.word	0x40020400

08000728 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_GPIO_Init+0x80>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin|SCLK_Pin|nOE_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0x84>)
 800077e:	f001 fdf3 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|SCLK_Pin|nOE_Pin;
 8000782:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0x84>)
 800079c:	f001 fc60 	bl	8002060 <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020800 	.word	0x40020800

080007b0 <drawPoint0.3>:
  /* USER CODE BEGIN WHILE */
  pix[0].x = 10;
  pix[0].y = 2;
  pix[1].x = 10;
  pix[1].y = 4;
 void drawPoint0(int x, int y){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	f8c7 c004 	str.w	ip, [r7, #4]
	 pixel.x = x;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <drawPoint0.3+0x90>)
 80007c4:	701a      	strb	r2, [r3, #0]
	 pixel.y = y;
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <drawPoint0.3+0x90>)
 80007cc:	705a      	strb	r2, [r3, #1]
	 clearScreen((uint8_t*)&data);
 80007ce:	481d      	ldr	r0, [pc, #116]	; (8000844 <drawPoint0.3+0x94>)
 80007d0:	f7ff fef2 	bl	80005b8 <clearScreen>
	 drawPixel(pixel, (uint8_t*)&data, P10AB_11);
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <drawPoint0.3+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	491a      	ldr	r1, [pc, #104]	; (8000844 <drawPoint0.3+0x94>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	f7ff fe7e 	bl	80004dc <drawPixel>
	 HAL_GPIO_WritePin(GPIOC, nOE_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e6:	4818      	ldr	r0, [pc, #96]	; (8000848 <drawPoint0.3+0x98>)
 80007e8:	f001 fdbe 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, SCLK_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <drawPoint0.3+0x98>)
 80007f4:	f001 fdb8 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <drawPoint0.3+0x98>)
 80007fe:	f001 fdb3 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	4810      	ldr	r0, [pc, #64]	; (8000848 <drawPoint0.3+0x98>)
 8000808:	f001 fdae 	bl	8002368 <HAL_GPIO_WritePin>

	 HAL_SPI_Transmit(&hspi2, (uint8_t*)&data, 16, 10);
 800080c:	230a      	movs	r3, #10
 800080e:	2210      	movs	r2, #16
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <drawPoint0.3+0x94>)
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <drawPoint0.3+0x9c>)
 8000814:	f002 fa6f 	bl	8002cf6 <HAL_SPI_Transmit>

	 HAL_GPIO_WritePin(GPIOC, SCLK_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <drawPoint0.3+0x98>)
 8000820:	f001 fda2 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, nOE_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <drawPoint0.3+0x98>)
 800082c:	f001 fd9c 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_Delay(0.1);
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fdb5 	bl	80013a0 <HAL_Delay>
 }
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000008c 	.word	0x2000008c
 8000844:	20000074 	.word	0x20000074
 8000848:	40020800 	.word	0x40020800
 800084c:	20000094 	.word	0x20000094

08000850 <main>:
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
int main(void)
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	60fb      	str	r3, [r7, #12]
  HAL_Init();
 800085c:	f000 fd2e 	bl	80012bc <HAL_Init>
  SystemClock_Config();
 8000860:	f000 fa0c 	bl	8000c7c <SystemClock_Config>
  MX_GPIO_Init();
 8000864:	f7ff ff60 	bl	8000728 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000868:	f000 fa76 	bl	8000d58 <MX_SPI2_Init>
  MX_TIM2_Init();
 800086c:	f000 fc62 	bl	8001134 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000870:	f7ff febc 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000874:	f000 fbdc 	bl	8001030 <MX_TIM1_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8000878:	4818      	ldr	r0, [pc, #96]	; (80008dc <main+0x8c>)
 800087a:	f002 fc43 	bl	8003104 <HAL_TIM_Base_Start_IT>
  pix[0].x = 10;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <main+0x90>)
 8000880:	220a      	movs	r2, #10
 8000882:	701a      	strb	r2, [r3, #0]
  pix[0].y = 2;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <main+0x90>)
 8000886:	2202      	movs	r2, #2
 8000888:	705a      	strb	r2, [r3, #1]
  pix[1].x = 10;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <main+0x90>)
 800088c:	220a      	movs	r2, #10
 800088e:	709a      	strb	r2, [r3, #2]
  pix[1].y = 4;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <main+0x90>)
 8000892:	2204      	movs	r2, #4
 8000894:	70da      	strb	r2, [r3, #3]

//	  drawPoint(15, 7);
//	  drawPoint(16, 7);
//	  drawPoint(15, 8);
//	  drawPoint(16, 8);
	  uint8_t Level[5] = {2,6,4,8,10};
 8000896:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <main+0x94>)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089e:	6018      	str	r0, [r3, #0]
 80008a0:	3304      	adds	r3, #4
 80008a2:	7019      	strb	r1, [r3, #0]
//	  for (uint8_t i = 0; i <= 5; i ++){
//		  drawSquare(Level[i]);
//		  HAL_Delay(10000);
//	  }

	  level = ((13*AdcValUsred/1900) - 189/19);
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <main+0x98>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <main+0x9c>)
 80008b6:	fb82 1203 	smull	r1, r2, r2, r3
 80008ba:	1252      	asrs	r2, r2, #9
 80008bc:	17db      	asrs	r3, r3, #31
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	3b09      	subs	r3, #9
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <main+0xa0>)
 80008c4:	6013      	str	r3, [r2, #0]
//	  level_led = level + (1);

	  drawSquare(level-2);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <main+0xa0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3b02      	subs	r3, #2
 80008cc:	f107 020c 	add.w	r2, r7, #12
 80008d0:	4694      	mov	ip, r2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f9b7 	bl	8000c46 <drawSquare.0>
  {
 80008d8:	e7dd      	b.n	8000896 <main+0x46>
 80008da:	bf00      	nop
 80008dc:	200000fc 	.word	0x200000fc
 80008e0:	20000084 	.word	0x20000084
 80008e4:	08003bc4 	.word	0x08003bc4
 80008e8:	200000f8 	.word	0x200000f8
 80008ec:	44fc3a35 	.word	0x44fc3a35
 80008f0:	20000090 	.word	0x20000090

080008f4 <drawPoint1.4>:
 void drawPoint1(int x, int y){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	f8c7 c004 	str.w	ip, [r7, #4]
	 pixel.x = x;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <drawPoint1.4+0x90>)
 8000908:	701a      	strb	r2, [r3, #0]
	 pixel.y = y;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <drawPoint1.4+0x90>)
 8000910:	705a      	strb	r2, [r3, #1]
	 clearScreen((uint8_t*)&data);
 8000912:	481d      	ldr	r0, [pc, #116]	; (8000988 <drawPoint1.4+0x94>)
 8000914:	f7ff fe50 	bl	80005b8 <clearScreen>
	 drawPixel(pixel, (uint8_t*)&data, P10AB_10);
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <drawPoint1.4+0x90>)
 800091a:	2201      	movs	r2, #1
 800091c:	491a      	ldr	r1, [pc, #104]	; (8000988 <drawPoint1.4+0x94>)
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	f7ff fddc 	bl	80004dc <drawPixel>
	 HAL_GPIO_WritePin(GPIOC, nOE_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <drawPoint1.4+0x98>)
 800092c:	f001 fd1c 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, SCLK_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000936:	4815      	ldr	r0, [pc, #84]	; (800098c <drawPoint1.4+0x98>)
 8000938:	f001 fd16 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2140      	movs	r1, #64	; 0x40
 8000940:	4812      	ldr	r0, [pc, #72]	; (800098c <drawPoint1.4+0x98>)
 8000942:	f001 fd11 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	4810      	ldr	r0, [pc, #64]	; (800098c <drawPoint1.4+0x98>)
 800094c:	f001 fd0c 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_SPI_Transmit(&hspi2, (uint8_t*)&data, 16, 10);
 8000950:	230a      	movs	r3, #10
 8000952:	2210      	movs	r2, #16
 8000954:	490c      	ldr	r1, [pc, #48]	; (8000988 <drawPoint1.4+0x94>)
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <drawPoint1.4+0x9c>)
 8000958:	f002 f9cd 	bl	8002cf6 <HAL_SPI_Transmit>
	 HAL_GPIO_WritePin(GPIOC, SCLK_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <drawPoint1.4+0x98>)
 8000964:	f001 fd00 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, nOE_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <drawPoint1.4+0x98>)
 8000970:	f001 fcfa 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_Delay(0.2);
 8000974:	2000      	movs	r0, #0
 8000976:	f000 fd13 	bl	80013a0 <HAL_Delay>
 }
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000008c 	.word	0x2000008c
 8000988:	20000074 	.word	0x20000074
 800098c:	40020800 	.word	0x40020800
 8000990:	20000094 	.word	0x20000094

08000994 <drawPoint2.5>:
 void drawPoint2(int x, int y){
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	f8c7 c004 	str.w	ip, [r7, #4]
	 pixel.x = x;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <drawPoint2.5+0x90>)
 80009a8:	701a      	strb	r2, [r3, #0]
	 pixel.y = y;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <drawPoint2.5+0x90>)
 80009b0:	705a      	strb	r2, [r3, #1]
	 clearScreen((uint8_t*)&data);
 80009b2:	481d      	ldr	r0, [pc, #116]	; (8000a28 <drawPoint2.5+0x94>)
 80009b4:	f7ff fe00 	bl	80005b8 <clearScreen>
	 drawPixel(pixel, (uint8_t*)&data, P10AB_01);
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <drawPoint2.5+0x90>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	491a      	ldr	r1, [pc, #104]	; (8000a28 <drawPoint2.5+0x94>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	f7ff fd8c 	bl	80004dc <drawPixel>
	 HAL_GPIO_WritePin(GPIOC, nOE_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ca:	4818      	ldr	r0, [pc, #96]	; (8000a2c <drawPoint2.5+0x98>)
 80009cc:	f001 fccc 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, SCLK_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d6:	4815      	ldr	r0, [pc, #84]	; (8000a2c <drawPoint2.5+0x98>)
 80009d8:	f001 fcc6 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	4812      	ldr	r0, [pc, #72]	; (8000a2c <drawPoint2.5+0x98>)
 80009e2:	f001 fcc1 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <drawPoint2.5+0x98>)
 80009ec:	f001 fcbc 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_SPI_Transmit(&hspi2, (uint8_t*)&data, 16, 10);
 80009f0:	230a      	movs	r3, #10
 80009f2:	2210      	movs	r2, #16
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <drawPoint2.5+0x94>)
 80009f6:	480e      	ldr	r0, [pc, #56]	; (8000a30 <drawPoint2.5+0x9c>)
 80009f8:	f002 f97d 	bl	8002cf6 <HAL_SPI_Transmit>
	 HAL_GPIO_WritePin(GPIOC, SCLK_Pin, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a02:	480a      	ldr	r0, [pc, #40]	; (8000a2c <drawPoint2.5+0x98>)
 8000a04:	f001 fcb0 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, nOE_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <drawPoint2.5+0x98>)
 8000a10:	f001 fcaa 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_Delay(0.2);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 fcc3 	bl	80013a0 <HAL_Delay>
 }
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000008c 	.word	0x2000008c
 8000a28:	20000074 	.word	0x20000074
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	20000094 	.word	0x20000094

08000a34 <drawPoint3.6>:
 void drawPoint3(int x, int y){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	f8c7 c004 	str.w	ip, [r7, #4]
	 pixel.x = x;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <drawPoint3.6+0x90>)
 8000a48:	701a      	strb	r2, [r3, #0]
	 pixel.y = y;
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <drawPoint3.6+0x90>)
 8000a50:	705a      	strb	r2, [r3, #1]
	 clearScreen((uint8_t*)&data);
 8000a52:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <drawPoint3.6+0x94>)
 8000a54:	f7ff fdb0 	bl	80005b8 <clearScreen>
	 drawPixel(pixel, (uint8_t*)&data, P10AB_00);
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <drawPoint3.6+0x90>)
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	491a      	ldr	r1, [pc, #104]	; (8000ac8 <drawPoint3.6+0x94>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	f7ff fd3c 	bl	80004dc <drawPixel>
	 HAL_GPIO_WritePin(GPIOC, nOE_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <drawPoint3.6+0x98>)
 8000a6c:	f001 fc7c 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, SCLK_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a76:	4815      	ldr	r0, [pc, #84]	; (8000acc <drawPoint3.6+0x98>)
 8000a78:	f001 fc76 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	4812      	ldr	r0, [pc, #72]	; (8000acc <drawPoint3.6+0x98>)
 8000a82:	f001 fc71 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	4810      	ldr	r0, [pc, #64]	; (8000acc <drawPoint3.6+0x98>)
 8000a8c:	f001 fc6c 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_SPI_Transmit(&hspi2, (uint8_t*)&data, 16, 10);
 8000a90:	230a      	movs	r3, #10
 8000a92:	2210      	movs	r2, #16
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <drawPoint3.6+0x94>)
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <drawPoint3.6+0x9c>)
 8000a98:	f002 f92d 	bl	8002cf6 <HAL_SPI_Transmit>
	 HAL_GPIO_WritePin(GPIOC, SCLK_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa2:	480a      	ldr	r0, [pc, #40]	; (8000acc <drawPoint3.6+0x98>)
 8000aa4:	f001 fc60 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, nOE_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <drawPoint3.6+0x98>)
 8000ab0:	f001 fc5a 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_Delay(0.2);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 fc73 	bl	80013a0 <HAL_Delay>
 }
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000008c 	.word	0x2000008c
 8000ac8:	20000074 	.word	0x20000074
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	20000094 	.word	0x20000094

08000ad4 <drawPoint.2>:
 void drawPoint(int x, int y){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	4663      	mov	r3, ip
 8000ae0:	f8c7 c004 	str.w	ip, [r7, #4]
	 if (y == 0 || y == 4 || y == 8|| y == 12 ){
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	d008      	beq.n	8000afc <drawPoint.2+0x28>
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	2a04      	cmp	r2, #4
 8000aee:	d005      	beq.n	8000afc <drawPoint.2+0x28>
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	2a08      	cmp	r2, #8
 8000af4:	d002      	beq.n	8000afc <drawPoint.2+0x28>
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	2a0c      	cmp	r2, #12
 8000afa:	d105      	bne.n	8000b08 <drawPoint.2+0x34>
		 drawPoint0(x, y);
 8000afc:	469c      	mov	ip, r3
 8000afe:	68b9      	ldr	r1, [r7, #8]
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f7ff fe55 	bl	80007b0 <drawPoint0.3>
 8000b06:	e035      	b.n	8000b74 <drawPoint.2+0xa0>
	 else if (y == 1 || y == 5 || y == 9 || y == 13){
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	2a01      	cmp	r2, #1
 8000b0c:	d008      	beq.n	8000b20 <drawPoint.2+0x4c>
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	2a05      	cmp	r2, #5
 8000b12:	d005      	beq.n	8000b20 <drawPoint.2+0x4c>
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	2a09      	cmp	r2, #9
 8000b18:	d002      	beq.n	8000b20 <drawPoint.2+0x4c>
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	2a0d      	cmp	r2, #13
 8000b1e:	d105      	bne.n	8000b2c <drawPoint.2+0x58>
		 drawPoint1(x, y);
 8000b20:	469c      	mov	ip, r3
 8000b22:	68b9      	ldr	r1, [r7, #8]
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f7ff fee5 	bl	80008f4 <drawPoint1.4>
 8000b2a:	e023      	b.n	8000b74 <drawPoint.2+0xa0>
	 else if (y == 2 ||  y == 6 || y == 10 || y == 14){
 8000b2c:	68ba      	ldr	r2, [r7, #8]
 8000b2e:	2a02      	cmp	r2, #2
 8000b30:	d008      	beq.n	8000b44 <drawPoint.2+0x70>
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	2a06      	cmp	r2, #6
 8000b36:	d005      	beq.n	8000b44 <drawPoint.2+0x70>
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	2a0a      	cmp	r2, #10
 8000b3c:	d002      	beq.n	8000b44 <drawPoint.2+0x70>
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	2a0e      	cmp	r2, #14
 8000b42:	d105      	bne.n	8000b50 <drawPoint.2+0x7c>
		 drawPoint2(x, y);
 8000b44:	469c      	mov	ip, r3
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff ff23 	bl	8000994 <drawPoint2.5>
 8000b4e:	e011      	b.n	8000b74 <drawPoint.2+0xa0>
	 else if (y == 3 || y == 7 || y == 11 || y == 15){
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	2a03      	cmp	r2, #3
 8000b54:	d008      	beq.n	8000b68 <drawPoint.2+0x94>
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	2a07      	cmp	r2, #7
 8000b5a:	d005      	beq.n	8000b68 <drawPoint.2+0x94>
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	2a0b      	cmp	r2, #11
 8000b60:	d002      	beq.n	8000b68 <drawPoint.2+0x94>
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	2a0f      	cmp	r2, #15
 8000b66:	d105      	bne.n	8000b74 <drawPoint.2+0xa0>
		 drawPoint3(x, y);
 8000b68:	469c      	mov	ip, r3
 8000b6a:	68b9      	ldr	r1, [r7, #8]
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff ff61 	bl	8000a34 <drawPoint3.6>
 }
 8000b72:	e7ff      	b.n	8000b74 <drawPoint.2+0xa0>
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <drawSquare_edge.1>:
 void drawSquare_edge(int lenght){
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	4664      	mov	r4, ip
 8000b86:	f8c7 c000 	str.w	ip, [r7]
	 int x0 = 15;
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	61bb      	str	r3, [r7, #24]
	 int y0 = 7;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	617b      	str	r3, [r7, #20]
	 int k = 1 - lenght/2;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	0fda      	lsrs	r2, r3, #31
 8000b96:	4413      	add	r3, r2
 8000b98:	105b      	asrs	r3, r3, #1
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
	 int x = x0 + k;
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
	 int y = y0 + k;
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4413      	add	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
	 drawPoint(x, y);
 8000bb0:	46a4      	mov	ip, r4
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f7ff ff8d 	bl	8000ad4 <drawPoint.2>
	 for (uint8_t  i = 0; i < lenght; i ++){
 8000bba:	2300      	movs	r3, #0
 8000bbc:	77fb      	strb	r3, [r7, #31]
 8000bbe:	e012      	b.n	8000be6 <drawSquare_edge.1+0x6a>
		 drawPoint(x, y + i);
 8000bc0:	7ffa      	ldrb	r2, [r7, #31]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	46a4      	mov	ip, r4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff ff82 	bl	8000ad4 <drawPoint.2>
		 drawPoint(x + i, y);
 8000bd0:	7ffa      	ldrb	r2, [r7, #31]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff7a 	bl	8000ad4 <drawPoint.2>
	 for (uint8_t  i = 0; i < lenght; i ++){
 8000be0:	7ffb      	ldrb	r3, [r7, #31]
 8000be2:	3301      	adds	r3, #1
 8000be4:	77fb      	strb	r3, [r7, #31]
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	dce8      	bgt.n	8000bc0 <drawSquare_edge.1+0x44>
	 for (uint8_t  i = 0; i < lenght; i ++){
 8000bee:	2300      	movs	r3, #0
 8000bf0:	77bb      	strb	r3, [r7, #30]
 8000bf2:	e016      	b.n	8000c22 <drawSquare_edge.1+0xa6>
		 drawPoint(x+i, y + lenght);
 8000bf4:	7fba      	ldrb	r2, [r7, #30]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	18d0      	adds	r0, r2, r3
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	46a4      	mov	ip, r4
 8000c02:	4619      	mov	r1, r3
 8000c04:	f7ff ff66 	bl	8000ad4 <drawPoint.2>
		 drawPoint(x + lenght, y+i);
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	18d0      	adds	r0, r2, r3
 8000c0e:	7fba      	ldrb	r2, [r7, #30]
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4413      	add	r3, r2
 8000c14:	46a4      	mov	ip, r4
 8000c16:	4619      	mov	r1, r3
 8000c18:	f7ff ff5c 	bl	8000ad4 <drawPoint.2>
	 for (uint8_t  i = 0; i < lenght; i ++){
 8000c1c:	7fbb      	ldrb	r3, [r7, #30]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	77bb      	strb	r3, [r7, #30]
 8000c22:	7fbb      	ldrb	r3, [r7, #30]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	dce4      	bgt.n	8000bf4 <drawSquare_edge.1+0x78>
	 drawPoint(x+lenght, y+lenght);
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	18d0      	adds	r0, r2, r3
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	46a4      	mov	ip, r4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f7ff ff4b 	bl	8000ad4 <drawPoint.2>
 }
 8000c3e:	bf00      	nop
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd90      	pop	{r4, r7, pc}

08000c46 <drawSquare.0>:
 void drawSquare(int lenght){
 8000c46:	b590      	push	{r4, r7, lr}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	4664      	mov	r4, ip
 8000c50:	f8c7 c000 	str.w	ip, [r7]
	 for (uint8_t i = 0; i <= lenght; i++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e007      	b.n	8000c6a <drawSquare.0+0x24>
		 drawSquare_edge(i);
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	46a4      	mov	ip, r4
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff8c 	bl	8000b7c <drawSquare_edge.1>
	 for (uint8_t i = 0; i <= lenght; i++){
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	3301      	adds	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	daf3      	bge.n	8000c5a <drawSquare.0+0x14>
 }
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd90      	pop	{r4, r7, pc}

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	; 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 ff86 	bl	8003b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <SystemClock_Config+0xc8>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a26      	ldr	r2, [pc, #152]	; (8000d44 <SystemClock_Config+0xc8>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <SystemClock_Config+0xc8>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <SystemClock_Config+0xcc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a20      	ldr	r2, [pc, #128]	; (8000d48 <SystemClock_Config+0xcc>)
 8000cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <SystemClock_Config+0xcc>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cec:	2308      	movs	r3, #8
 8000cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000cf0:	2364      	movs	r3, #100	; 0x64
 8000cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fb4b 	bl	800239c <HAL_RCC_OscConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d0c:	f000 f81e 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d10:	230f      	movs	r3, #15
 8000d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d14:	2302      	movs	r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fdad 	bl	800288c <HAL_RCC_ClockConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d38:	f000 f808 	bl	8000d4c <Error_Handler>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3750      	adds	r7, #80	; 0x50
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40007000 	.word	0x40007000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d5e:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000da4:	220a      	movs	r2, #10
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_SPI2_Init+0x64>)
 8000daa:	f001 ff1b 	bl	8002be4 <HAL_SPI_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000db4:	f7ff ffca 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000094 	.word	0x20000094
 8000dc0:	40003800 	.word	0x40003800

08000dc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <HAL_SPI_MspInit+0xc0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d14a      	bne.n	8000e7c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <HAL_SPI_MspInit+0xc4>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a26      	ldr	r2, [pc, #152]	; (8000e88 <HAL_SPI_MspInit+0xc4>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <HAL_SPI_MspInit+0xc4>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_SPI_MspInit+0xc4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_SPI_MspInit+0xc4>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_SPI_MspInit+0xc4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_SPI_MspInit+0xc4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <HAL_SPI_MspInit+0xc4>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_SPI_MspInit+0xc4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <HAL_SPI_MspInit+0xc8>)
 8000e56:	f001 f903 	bl	8002060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <HAL_SPI_MspInit+0xcc>)
 8000e78:	f001 f8f2 	bl	8002060 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40003800 	.word	0x40003800
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40020400 	.word	0x40020400

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 fa16 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <ADC_IRQHandler+0x10>)
 8000f3e:	f000 fc09 	bl	8001754 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000002c 	.word	0x2000002c

08000f4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f50:	4821      	ldr	r0, [pc, #132]	; (8000fd8 <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8000f52:	f002 f988 	bl	8003266 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  Tim1IRQCount++;
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <TIM1_UP_TIM10_IRQHandler+0x90>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <TIM1_UP_TIM10_IRQHandler+0x90>)
 8000f62:	801a      	strh	r2, [r3, #0]

  HAL_ADC_Start(&hadc1);
 8000f64:	481e      	ldr	r0, [pc, #120]	; (8000fe0 <TIM1_UP_TIM10_IRQHandler+0x94>)
 8000f66:	f000 fa83 	bl	8001470 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10);
 8000f6a:	210a      	movs	r1, #10
 8000f6c:	481c      	ldr	r0, [pc, #112]	; (8000fe0 <TIM1_UP_TIM10_IRQHandler+0x94>)
 8000f6e:	f000 fb66 	bl	800163e <HAL_ADC_PollForConversion>
  AdcVal = HAL_ADC_GetValue(&hadc1);
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <TIM1_UP_TIM10_IRQHandler+0x94>)
 8000f74:	f000 fcfe 	bl	8001974 <HAL_ADC_GetValue>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <TIM1_UP_TIM10_IRQHandler+0x98>)
 8000f7e:	801a      	strh	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <TIM1_UP_TIM10_IRQHandler+0x94>)
 8000f82:	f000 fb29 	bl	80015d8 <HAL_ADC_Stop>

  UsredBuf = UsredBuf + AdcVal ;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <TIM1_UP_TIM10_IRQHandler+0x98>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <TIM1_UP_TIM10_IRQHandler+0x9c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <TIM1_UP_TIM10_IRQHandler+0x9c>)
 8000f96:	6013      	str	r3, [r2, #0]
  if (++Counter >= MaxCount){
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <TIM1_UP_TIM10_IRQHandler+0xa0>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <TIM1_UP_TIM10_IRQHandler+0xa0>)
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	8011      	strh	r1, [r2, #0]
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <TIM1_UP_TIM10_IRQHandler+0xa4>)
 8000faa:	8812      	ldrh	r2, [r2, #0]
 8000fac:	b292      	uxth	r2, r2
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d30f      	bcc.n	8000fd2 <TIM1_UP_TIM10_IRQHandler+0x86>
	  AdcValUsred = (uint16_t)(UsredBuf/MaxCount);
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <TIM1_UP_TIM10_IRQHandler+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <TIM1_UP_TIM10_IRQHandler+0xa4>)
 8000fb8:	8812      	ldrh	r2, [r2, #0]
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <TIM1_UP_TIM10_IRQHandler+0xa8>)
 8000fc4:	801a      	strh	r2, [r3, #0]
	  UsredBuf = 0;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <TIM1_UP_TIM10_IRQHandler+0x9c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
	  Counter = 0;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <TIM1_UP_TIM10_IRQHandler+0xa0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000fc 	.word	0x200000fc
 8000fdc:	200000ec 	.word	0x200000ec
 8000fe0:	2000002c 	.word	0x2000002c
 8000fe4:	200000ee 	.word	0x200000ee
 8000fe8:	200000f4 	.word	0x200000f4
 8000fec:	200000f0 	.word	0x200000f0
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	200000f8 	.word	0x200000f8

08000ff8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	Tim2Count =! Tim2Count;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM2_IRQHandler+0x10>)
 8000ffe:	f002 f932 	bl	8003266 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000144 	.word	0x20000144

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b092      	sub	sp, #72	; 0x48
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001036:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2220      	movs	r2, #32
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fd9e 	bl	8003b9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <MX_TIM1_Init+0xfc>)
 8001062:	4a33      	ldr	r2, [pc, #204]	; (8001130 <MX_TIM1_Init+0x100>)
 8001064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 300-1;
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <MX_TIM1_Init+0xfc>)
 8001068:	f240 122b 	movw	r2, #299	; 0x12b
 800106c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <MX_TIM1_Init+0xfc>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3333;
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <MX_TIM1_Init+0xfc>)
 8001076:	f640 5205 	movw	r2, #3333	; 0xd05
 800107a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_TIM1_Init+0xfc>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <MX_TIM1_Init+0xfc>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_TIM1_Init+0xfc>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <MX_TIM1_Init+0xfc>)
 8001090:	f002 f89a 	bl	80031c8 <HAL_TIM_OC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800109a:	f7ff fe57 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010aa:	4619      	mov	r1, r3
 80010ac:	481f      	ldr	r0, [pc, #124]	; (800112c <MX_TIM1_Init+0xfc>)
 80010ae:	f002 fc7d 	bl	80039ac <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80010b8:	f7ff fe48 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	4812      	ldr	r0, [pc, #72]	; (800112c <MX_TIM1_Init+0xfc>)
 80010e2:	f002 f9c9 	bl	8003478 <HAL_TIM_OC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80010ec:	f7ff fe2e 	bl	8000d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001108:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_TIM1_Init+0xfc>)
 8001114:	f002 fcb8 	bl	8003a88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800111e:	f7ff fe15 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3748      	adds	r7, #72	; 0x48
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000fc 	.word	0x200000fc
 8001130:	40010000 	.word	0x40010000

08001134 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	615a      	str	r2, [r3, #20]
 8001154:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_TIM2_Init+0xa8>)
 8001158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_TIM2_Init+0xa8>)
 8001160:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_TIM2_Init+0xa8>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_TIM2_Init+0xa8>)
 800116e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_TIM2_Init+0xa8>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_TIM2_Init+0xa8>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001180:	4816      	ldr	r0, [pc, #88]	; (80011dc <MX_TIM2_Init+0xa8>)
 8001182:	f002 f821 	bl	80031c8 <HAL_TIM_OC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800118c:	f7ff fdde 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001198:	f107 0320 	add.w	r3, r7, #32
 800119c:	4619      	mov	r1, r3
 800119e:	480f      	ldr	r0, [pc, #60]	; (80011dc <MX_TIM2_Init+0xa8>)
 80011a0:	f002 fc04 	bl	80039ac <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011aa:	f7ff fdcf 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_TIM2_Init+0xa8>)
 80011c6:	f002 f957 	bl	8003478 <HAL_TIM_OC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011d0:	f7ff fdbc 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000144 	.word	0x20000144

080011e0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <HAL_TIM_OC_MspInit+0x80>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d116      	bne.n	8001220 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_TIM_OC_MspInit+0x84>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <HAL_TIM_OC_MspInit+0x84>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_TIM_OC_MspInit+0x84>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2019      	movs	r0, #25
 8001214:	f000 feed 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001218:	2019      	movs	r0, #25
 800121a:	f000 ff06 	bl	800202a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800121e:	e01a      	b.n	8001256 <HAL_TIM_OC_MspInit+0x76>
  else if(tim_ocHandle->Instance==TIM2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001228:	d115      	bne.n	8001256 <HAL_TIM_OC_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_TIM_OC_MspInit+0x84>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_TIM_OC_MspInit+0x84>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_TIM_OC_MspInit+0x84>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	201c      	movs	r0, #28
 800124c:	f000 fed1 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001250:	201c      	movs	r0, #28
 8001252:	f000 feea 	bl	800202a <HAL_NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40010000 	.word	0x40010000
 8001264:	40023800 	.word	0x40023800

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800126e:	490e      	ldr	r1, [pc, #56]	; (80012a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001270:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001284:	4c0b      	ldr	r4, [pc, #44]	; (80012b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001292:	f7ff febb 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f002 fc5d 	bl	8003b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff fad9 	bl	8000850 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012ac:	08003bec 	.word	0x08003bec
  ldr r2, =_sbss
 80012b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012b4:	20000190 	.word	0x20000190

080012b8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <DMA1_Stream0_IRQHandler>
	...

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_Init+0x40>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_Init+0x40>)
 80012d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_Init+0x40>)
 80012de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 fe79 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f000 f808 	bl	8001300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fdd0 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023c00 	.word	0x40023c00

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x54>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x58>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fe91 	bl	8002046 <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 fe59 	bl	8001ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_InitTick+0x5c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000004 	.word	0x20000004
 8001358:	2000000c 	.word	0x2000000c
 800135c:	20000008 	.word	0x20000008

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x24>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_IncTick+0x24>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	2000000c 	.word	0x2000000c
 8001384:	2000018c 	.word	0x2000018c

08001388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_GetTick+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	2000018c 	.word	0x2000018c

080013a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a8:	f7ff ffee 	bl	8001388 <HAL_GetTick>
 80013ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	d005      	beq.n	80013c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_Delay+0x44>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013c6:	bf00      	nop
 80013c8:	f7ff ffde 	bl	8001388 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8f7      	bhi.n	80013c8 <HAL_Delay+0x28>
  {
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000000c 	.word	0x2000000c

080013e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e033      	b.n	8001466 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff f942 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800142e:	f023 0302 	bic.w	r3, r3, #2
 8001432:	f043 0202 	orr.w	r2, r3, #2
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fbf8 	bl	8001c30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f023 0303 	bic.w	r3, r3, #3
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
 8001456:	e001      	b.n	800145c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_ADC_Start+0x1a>
 8001486:	2302      	movs	r3, #2
 8001488:	e097      	b.n	80015ba <HAL_ADC_Start+0x14a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b01      	cmp	r3, #1
 800149e:	d018      	beq.n	80014d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <HAL_ADC_Start+0x158>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a45      	ldr	r2, [pc, #276]	; (80015cc <HAL_ADC_Start+0x15c>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9a      	lsrs	r2, r3, #18
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014c4:	e002      	b.n	80014cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d15f      	bne.n	80015a0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800150a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800151e:	d106      	bne.n	800152e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	f023 0206 	bic.w	r2, r3, #6
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
 800152c:	e002      	b.n	8001534 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <HAL_ADC_Start+0x160>)
 800153e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001548:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10f      	bne.n	8001576 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d129      	bne.n	80015b8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	e020      	b.n	80015b8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <HAL_ADC_Start+0x164>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d11b      	bne.n	80015b8 <HAL_ADC_Start+0x148>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d114      	bne.n	80015b8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	e00b      	b.n	80015b8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f043 0210 	orr.w	r2, r3, #16
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	f043 0201 	orr.w	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000004 	.word	0x20000004
 80015cc:	431bde83 	.word	0x431bde83
 80015d0:	40012300 	.word	0x40012300
 80015d4:	40012000 	.word	0x40012000

080015d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Stop+0x16>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e021      	b.n	8001632 <HAL_ADC_Stop+0x5a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0201 	bic.w	r2, r2, #1
 8001604:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d109      	bne.n	8001628 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165a:	d113      	bne.n	8001684 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800166a:	d10b      	bne.n	8001684 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	f043 0220 	orr.w	r2, r3, #32
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e063      	b.n	800174c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001684:	f7ff fe80 	bl	8001388 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800168a:	e021      	b.n	80016d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001692:	d01d      	beq.n	80016d0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <HAL_ADC_PollForConversion+0x6c>
 800169a:	f7ff fe75 	bl	8001388 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d212      	bcs.n	80016d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d00b      	beq.n	80016d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f043 0204 	orr.w	r2, r3, #4
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e03d      	b.n	800174c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d1d6      	bne.n	800168c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f06f 0212 	mvn.w	r2, #18
 80016e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d123      	bne.n	800174a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001706:	2b00      	cmp	r3, #0
 8001708:	d11f      	bne.n	800174a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001722:	2b00      	cmp	r3, #0
 8001724:	d111      	bne.n	800174a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d049      	beq.n	800181e <HAL_ADC_IRQHandler+0xca>
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d046      	beq.n	800181e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d12b      	bne.n	800180e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d127      	bne.n	800180e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d119      	bne.n	800180e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0220 	bic.w	r2, r2, #32
 80017e8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f8bd 	bl	800198e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0212 	mvn.w	r2, #18
 800181c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d057      	beq.n	80018e4 <HAL_ADC_IRQHandler+0x190>
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d054      	beq.n	80018e4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d139      	bne.n	80018d4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001878:	2b00      	cmp	r3, #0
 800187a:	d12b      	bne.n	80018d4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001886:	2b00      	cmp	r3, #0
 8001888:	d124      	bne.n	80018d4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001894:	2b00      	cmp	r3, #0
 8001896:	d11d      	bne.n	80018d4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800189c:	2b00      	cmp	r3, #0
 800189e:	d119      	bne.n	80018d4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 faa7 	bl	8001e28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f06f 020c 	mvn.w	r2, #12
 80018e2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d017      	beq.n	800192a <HAL_ADC_IRQHandler+0x1d6>
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d014      	beq.n	800192a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d10d      	bne.n	800192a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f841 	bl	80019a2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0201 	mvn.w	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 0320 	and.w	r3, r3, #32
 8001930:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001938:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d015      	beq.n	800196c <HAL_ADC_IRQHandler+0x218>
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d012      	beq.n	800196c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f043 0202 	orr.w	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f06f 0220 	mvn.w	r2, #32
 800195a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f82a 	bl	80019b6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f06f 0220 	mvn.w	r2, #32
 800196a:	601a      	str	r2, [r3, #0]
  }
}
 800196c:	bf00      	nop
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1c>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e113      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x244>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d925      	bls.n	8001a44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68d9      	ldr	r1, [r3, #12]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b1e      	subs	r3, #30
 8001a0e:	2207      	movs	r2, #7
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43da      	mvns	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68d9      	ldr	r1, [r3, #12]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4603      	mov	r3, r0
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4403      	add	r3, r0
 8001a36:	3b1e      	subs	r3, #30
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	e022      	b.n	8001a8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6919      	ldr	r1, [r3, #16]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	2207      	movs	r2, #7
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	400a      	ands	r2, r1
 8001a66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6919      	ldr	r1, [r3, #16]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4403      	add	r3, r0
 8001a80:	409a      	lsls	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d824      	bhi.n	8001adc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b05      	subs	r3, #5
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b05      	subs	r3, #5
 8001ace:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ada:	e04c      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d824      	bhi.n	8001b2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	3b23      	subs	r3, #35	; 0x23
 8001af6:	221f      	movs	r2, #31
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43da      	mvns	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	400a      	ands	r2, r1
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3b23      	subs	r3, #35	; 0x23
 8001b20:	fa00 f203 	lsl.w	r2, r0, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b2c:	e023      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b41      	subs	r3, #65	; 0x41
 8001b40:	221f      	movs	r2, #31
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3b41      	subs	r3, #65	; 0x41
 8001b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <HAL_ADC_ConfigChannel+0x250>)
 8001b78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <HAL_ADC_ConfigChannel+0x254>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d10f      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1d8>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	; (8001c20 <HAL_ADC_ConfigChannel+0x254>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d12b      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x23a>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <HAL_ADC_ConfigChannel+0x258>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d003      	beq.n	8001bc0 <HAL_ADC_ConfigChannel+0x1f4>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b11      	cmp	r3, #17
 8001bbe:	d122      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <HAL_ADC_ConfigChannel+0x258>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d111      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_ADC_ConfigChannel+0x25c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <HAL_ADC_ConfigChannel+0x260>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	0c9a      	lsrs	r2, r3, #18
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bf8:	e002      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f9      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40012300 	.word	0x40012300
 8001c20:	40012000 	.word	0x40012000
 8001c24:	10000012 	.word	0x10000012
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	431bde83 	.word	0x431bde83

08001c30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c38:	4b79      	ldr	r3, [pc, #484]	; (8001e20 <ADC_Init+0x1f0>)
 8001c3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	021a      	lsls	r2, r3, #8
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6899      	ldr	r1, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	4a58      	ldr	r2, [pc, #352]	; (8001e24 <ADC_Init+0x1f4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d022      	beq.n	8001d0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6899      	ldr	r1, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6899      	ldr	r1, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	e00f      	b.n	8001d2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0202 	bic.w	r2, r2, #2
 8001d3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6899      	ldr	r1, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7e1b      	ldrb	r3, [r3, #24]
 8001d48:	005a      	lsls	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01b      	beq.n	8001d94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6859      	ldr	r1, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	3b01      	subs	r3, #1
 8001d88:	035a      	lsls	r2, r3, #13
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	e007      	b.n	8001da4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	051a      	lsls	r2, r3, #20
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6899      	ldr	r1, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001de6:	025a      	lsls	r2, r3, #9
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6899      	ldr	r1, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	029a      	lsls	r2, r3, #10
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	609a      	str	r2, [r3, #8]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40012300 	.word	0x40012300
 8001e24:	0f000001 	.word	0x0f000001

08001e28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <__NVIC_EnableIRQ+0x38>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa8:	d301      	bcc.n	8001fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <SysTick_Config+0x40>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb6:	210f      	movs	r1, #15
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f7ff ff8e 	bl	8001edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc8:	2207      	movs	r2, #7
 8001fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	e000e010 	.word	0xe000e010

08001fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff29 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002004:	f7ff ff3e 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff8e 	bl	8001f30 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5d 	bl	8001edc <__NVIC_SetPriority>
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff31 	bl	8001ea0 <__NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffa2 	bl	8001f98 <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	e159      	b.n	8002330 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800207c:	2201      	movs	r2, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8148 	bne.w	800232a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d005      	beq.n	80020b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d130      	bne.n	8002114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 0201 	and.w	r2, r3, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b03      	cmp	r3, #3
 800211e:	d017      	beq.n	8002150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d123      	bne.n	80021a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a2 	beq.w	800232a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b57      	ldr	r3, [pc, #348]	; (8002348 <HAL_GPIO_Init+0x2e8>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a56      	ldr	r2, [pc, #344]	; (8002348 <HAL_GPIO_Init+0x2e8>)
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b54      	ldr	r3, [pc, #336]	; (8002348 <HAL_GPIO_Init+0x2e8>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002202:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_GPIO_Init+0x2ec>)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	220f      	movs	r2, #15
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a49      	ldr	r2, [pc, #292]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0x202>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a48      	ldr	r2, [pc, #288]	; (8002354 <HAL_GPIO_Init+0x2f4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x1fe>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a47      	ldr	r2, [pc, #284]	; (8002358 <HAL_GPIO_Init+0x2f8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x1fa>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a46      	ldr	r2, [pc, #280]	; (800235c <HAL_GPIO_Init+0x2fc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x1f6>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a45      	ldr	r2, [pc, #276]	; (8002360 <HAL_GPIO_Init+0x300>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x1f2>
 800224e:	2304      	movs	r3, #4
 8002250:	e008      	b.n	8002264 <HAL_GPIO_Init+0x204>
 8002252:	2307      	movs	r3, #7
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x204>
 8002256:	2303      	movs	r3, #3
 8002258:	e004      	b.n	8002264 <HAL_GPIO_Init+0x204>
 800225a:	2302      	movs	r3, #2
 800225c:	e002      	b.n	8002264 <HAL_GPIO_Init+0x204>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_GPIO_Init+0x204>
 8002262:	2300      	movs	r3, #0
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f002 0203 	and.w	r2, r2, #3
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	4093      	lsls	r3, r2
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002274:	4935      	ldr	r1, [pc, #212]	; (800234c <HAL_GPIO_Init+0x2ec>)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002282:	4b38      	ldr	r3, [pc, #224]	; (8002364 <HAL_GPIO_Init+0x304>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a6:	4a2f      	ldr	r2, [pc, #188]	; (8002364 <HAL_GPIO_Init+0x304>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_GPIO_Init+0x304>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d0:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_GPIO_Init+0x304>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_GPIO_Init+0x304>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fa:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <HAL_GPIO_Init+0x304>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_GPIO_Init+0x304>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002324:	4a0f      	ldr	r2, [pc, #60]	; (8002364 <HAL_GPIO_Init+0x304>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	f67f aea2 	bls.w	800207c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	40013800 	.word	0x40013800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021000 	.word	0x40021000
 8002364:	40013c00 	.word	0x40013c00

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002384:	e003      	b.n	800238e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	041a      	lsls	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	619a      	str	r2, [r3, #24]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e267      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d075      	beq.n	80024a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ba:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d00c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c6:	4b85      	ldr	r3, [pc, #532]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d112      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d2:	4b82      	ldr	r3, [pc, #520]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023de:	d10b      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	4b7e      	ldr	r3, [pc, #504]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05b      	beq.n	80024a4 <HAL_RCC_OscConfig+0x108>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d157      	bne.n	80024a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e242      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d106      	bne.n	8002410 <HAL_RCC_OscConfig+0x74>
 8002402:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a75      	ldr	r2, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e01d      	b.n	800244c <HAL_RCC_OscConfig+0xb0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x98>
 800241a:	4b70      	ldr	r3, [pc, #448]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6f      	ldr	r2, [pc, #444]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b6d      	ldr	r3, [pc, #436]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a6c      	ldr	r2, [pc, #432]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0xb0>
 8002434:	4b69      	ldr	r3, [pc, #420]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a68      	ldr	r2, [pc, #416]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 800243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b66      	ldr	r3, [pc, #408]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a65      	ldr	r2, [pc, #404]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d013      	beq.n	800247c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe ff98 	bl	8001388 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe ff94 	bl	8001388 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e207      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b5b      	ldr	r3, [pc, #364]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0xc0>
 800247a:	e014      	b.n	80024a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe ff84 	bl	8001388 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe ff80 	bl	8001388 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1f3      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	4b51      	ldr	r3, [pc, #324]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0xe8>
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d063      	beq.n	800257a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b2:	4b4a      	ldr	r3, [pc, #296]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d11c      	bne.n	8002504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ca:	4b44      	ldr	r3, [pc, #272]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d116      	bne.n	8002504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_RCC_OscConfig+0x152>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e1c7      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4937      	ldr	r1, [pc, #220]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	e03a      	b.n	800257a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250c:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <HAL_RCC_OscConfig+0x244>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe ff39 	bl	8001388 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251a:	f7fe ff35 	bl	8001388 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e1a8      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4925      	ldr	r1, [pc, #148]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
 800254c:	e015      	b.n	800257a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254e:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_RCC_OscConfig+0x244>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe ff18 	bl	8001388 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255c:	f7fe ff14 	bl	8001388 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e187      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d036      	beq.n	80025f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_RCC_OscConfig+0x248>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe fef8 	bl	8001388 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259c:	f7fe fef4 	bl	8001388 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e167      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x240>)
 80025b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x200>
 80025ba:	e01b      	b.n	80025f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_OscConfig+0x248>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fee1 	bl	8001388 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	e00e      	b.n	80025e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ca:	f7fe fedd 	bl	8001388 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d907      	bls.n	80025e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e150      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
 80025dc:	40023800 	.word	0x40023800
 80025e0:	42470000 	.word	0x42470000
 80025e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	4b88      	ldr	r3, [pc, #544]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80025ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ea      	bne.n	80025ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8097 	beq.w	8002730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002606:	4b81      	ldr	r3, [pc, #516]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b7d      	ldr	r3, [pc, #500]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a7c      	ldr	r2, [pc, #496]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b7a      	ldr	r3, [pc, #488]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b77      	ldr	r3, [pc, #476]	; (8002810 <HAL_RCC_OscConfig+0x474>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d118      	bne.n	8002670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263e:	4b74      	ldr	r3, [pc, #464]	; (8002810 <HAL_RCC_OscConfig+0x474>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a73      	ldr	r2, [pc, #460]	; (8002810 <HAL_RCC_OscConfig+0x474>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264a:	f7fe fe9d 	bl	8001388 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7fe fe99 	bl	8001388 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e10c      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_OscConfig+0x474>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x2ea>
 8002678:	4b64      	ldr	r3, [pc, #400]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a63      	ldr	r2, [pc, #396]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
 8002684:	e01c      	b.n	80026c0 <HAL_RCC_OscConfig+0x324>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x30c>
 800268e:	4b5f      	ldr	r3, [pc, #380]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	4a5e      	ldr	r2, [pc, #376]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6713      	str	r3, [r2, #112]	; 0x70
 800269a:	4b5c      	ldr	r3, [pc, #368]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	4a5b      	ldr	r2, [pc, #364]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6713      	str	r3, [r2, #112]	; 0x70
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0x324>
 80026a8:	4b58      	ldr	r3, [pc, #352]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	4a57      	ldr	r2, [pc, #348]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	6713      	str	r3, [r2, #112]	; 0x70
 80026b4:	4b55      	ldr	r3, [pc, #340]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a54      	ldr	r2, [pc, #336]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026ba:	f023 0304 	bic.w	r3, r3, #4
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe fe5e 	bl	8001388 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe fe5a 	bl	8001388 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e0cb      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ee      	beq.n	80026d0 <HAL_RCC_OscConfig+0x334>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7fe fe48 	bl	8001388 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe fe44 	bl	8001388 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0b5      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002712:	4b3e      	ldr	r3, [pc, #248]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ee      	bne.n	80026fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	4a38      	ldr	r2, [pc, #224]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800272a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a1 	beq.w	800287c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800273a:	4b34      	ldr	r3, [pc, #208]	; (800280c <HAL_RCC_OscConfig+0x470>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d05c      	beq.n	8002800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d141      	bne.n	80027d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_RCC_OscConfig+0x478>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7fe fe18 	bl	8001388 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fe14 	bl	8001388 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e087      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x470>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	3b01      	subs	r3, #1
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	491b      	ldr	r1, [pc, #108]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x478>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe fded 	bl	8001388 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b2:	f7fe fde9 	bl	8001388 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e05c      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x416>
 80027d0:	e054      	b.n	800287c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_RCC_OscConfig+0x478>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe fdd6 	bl	8001388 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe fdd2 	bl	8001388 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e045      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_OscConfig+0x470>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x444>
 80027fe:	e03d      	b.n	800287c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e038      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
 800280c:	40023800 	.word	0x40023800
 8002810:	40007000 	.word	0x40007000
 8002814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x4ec>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d028      	beq.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d121      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d11a      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800284e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002850:	4293      	cmp	r3, r2
 8002852:	d111      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	3b01      	subs	r3, #1
 8002862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0cc      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d90c      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b8      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f8:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a52      	ldr	r2, [pc, #328]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b50      	ldr	r3, [pc, #320]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	494d      	ldr	r1, [pc, #308]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d044      	beq.n	80029ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d119      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d003      	beq.n	800294a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002946:	2b03      	cmp	r3, #3
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294a:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e06f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e067      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296a:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4934      	ldr	r1, [pc, #208]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	4313      	orrs	r3, r2
 800297a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800297c:	f7fe fd04 	bl	8001388 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	e00a      	b.n	800299a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f7fe fd00 	bl	8001388 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e04f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 020c 	and.w	r2, r3, #12
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1eb      	bne.n	8002984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d20c      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e032      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4916      	ldr	r1, [pc, #88]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	490e      	ldr	r1, [pc, #56]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a12:	f000 f821 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	490a      	ldr	r1, [pc, #40]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	5ccb      	ldrb	r3, [r1, r3]
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fc64 	bl	8001300 <HAL_InitTick>

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023c00 	.word	0x40023c00
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	08003bcc 	.word	0x08003bcc
 8002a50:	20000004 	.word	0x20000004
 8002a54:	20000008 	.word	0x20000008

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a5c:	b090      	sub	sp, #64	; 0x40
 8002a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
 8002a64:	2300      	movs	r3, #0
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a68:	2300      	movs	r3, #0
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a70:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d00d      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x40>
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	f200 80a1 	bhi.w	8002bc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x34>
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a8a:	e09b      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a90:	e09b      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a92:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a96:	e098      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a98:	4b4f      	ldr	r3, [pc, #316]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa2:	4b4d      	ldr	r3, [pc, #308]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d028      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aae:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	099b      	lsrs	r3, r3, #6
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	627a      	str	r2, [r7, #36]	; 0x24
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ac4:	fb03 f201 	mul.w	r2, r3, r1
 8002ac8:	2300      	movs	r3, #0
 8002aca:	fb00 f303 	mul.w	r3, r0, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	4a43      	ldr	r2, [pc, #268]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ad2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad8:	460a      	mov	r2, r1
 8002ada:	62ba      	str	r2, [r7, #40]	; 0x28
 8002adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ade:	4413      	add	r3, r2
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	61fa      	str	r2, [r7, #28]
 8002aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002af2:	f7fd fb71 	bl	80001d8 <__aeabi_uldivmod>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4613      	mov	r3, r2
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afe:	e053      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b00:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	2200      	movs	r2, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	617a      	str	r2, [r7, #20]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b12:	f04f 0b00 	mov.w	fp, #0
 8002b16:	4652      	mov	r2, sl
 8002b18:	465b      	mov	r3, fp
 8002b1a:	f04f 0000 	mov.w	r0, #0
 8002b1e:	f04f 0100 	mov.w	r1, #0
 8002b22:	0159      	lsls	r1, r3, #5
 8002b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b28:	0150      	lsls	r0, r2, #5
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	ebb2 080a 	subs.w	r8, r2, sl
 8002b32:	eb63 090b 	sbc.w	r9, r3, fp
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b4a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b4e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	00eb      	lsls	r3, r5, #3
 8002b5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b60:	00e2      	lsls	r2, r4, #3
 8002b62:	4614      	mov	r4, r2
 8002b64:	461d      	mov	r5, r3
 8002b66:	eb14 030a 	adds.w	r3, r4, sl
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	eb45 030b 	adc.w	r3, r5, fp
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b7e:	4629      	mov	r1, r5
 8002b80:	028b      	lsls	r3, r1, #10
 8002b82:	4621      	mov	r1, r4
 8002b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b88:	4621      	mov	r1, r4
 8002b8a:	028a      	lsls	r2, r1, #10
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	2200      	movs	r2, #0
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	60fa      	str	r2, [r7, #12]
 8002b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b9c:	f7fd fb1c 	bl	80001d8 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002bb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bc2:	e002      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002bc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3740      	adds	r7, #64	; 0x40
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	00f42400 	.word	0x00f42400
 8002be0:	017d7840 	.word	0x017d7840

08002be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e07b      	b.n	8002cee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d108      	bne.n	8002c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c06:	d009      	beq.n	8002c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
 8002c0e:	e005      	b.n	8002c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe f8c4 	bl	8000dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	ea42 0103 	orr.w	r1, r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0104 	and.w	r1, r3, #4
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	f003 0210 	and.w	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_SPI_Transmit+0x22>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e126      	b.n	8002f66 <HAL_SPI_Transmit+0x270>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d20:	f7fe fb32 	bl	8001388 <HAL_GetTick>
 8002d24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d002      	beq.n	8002d3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
 8002d38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d3a:	e10b      	b.n	8002f54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_SPI_Transmit+0x52>
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d4c:	e102      	b.n	8002f54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2203      	movs	r2, #3
 8002d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	88fa      	ldrh	r2, [r7, #6]
 8002d66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	88fa      	ldrh	r2, [r7, #6]
 8002d6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d94:	d10f      	bne.n	8002db6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d007      	beq.n	8002dd4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ddc:	d14b      	bne.n	8002e76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_SPI_Transmit+0xf6>
 8002de6:	8afb      	ldrh	r3, [r7, #22]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d13e      	bne.n	8002e6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	881a      	ldrh	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	1c9a      	adds	r2, r3, #2
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e10:	e02b      	b.n	8002e6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d112      	bne.n	8002e46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	881a      	ldrh	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	1c9a      	adds	r2, r3, #2
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e44:	e011      	b.n	8002e6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e46:	f7fe fa9f 	bl	8001388 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d803      	bhi.n	8002e5e <HAL_SPI_Transmit+0x168>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d102      	bne.n	8002e64 <HAL_SPI_Transmit+0x16e>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e68:	e074      	b.n	8002f54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ce      	bne.n	8002e12 <HAL_SPI_Transmit+0x11c>
 8002e74:	e04c      	b.n	8002f10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_SPI_Transmit+0x18e>
 8002e7e:	8afb      	ldrh	r3, [r7, #22]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d140      	bne.n	8002f06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	7812      	ldrb	r2, [r2, #0]
 8002e90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eaa:	e02c      	b.n	8002f06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d113      	bne.n	8002ee2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	7812      	ldrb	r2, [r2, #0]
 8002ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ee0:	e011      	b.n	8002f06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ee2:	f7fe fa51 	bl	8001388 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d803      	bhi.n	8002efa <HAL_SPI_Transmit+0x204>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Transmit+0x20a>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f04:	e026      	b.n	8002f54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1cd      	bne.n	8002eac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f8b3 	bl	8003080 <SPI_EndRxTxTransaction>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e000      	b.n	8002f54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f80:	f7fe fa02 	bl	8001388 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f90:	f7fe f9fa 	bl	8001388 <HAL_GetTick>
 8002f94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f96:	4b39      	ldr	r3, [pc, #228]	; (800307c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	015b      	lsls	r3, r3, #5
 8002f9c:	0d1b      	lsrs	r3, r3, #20
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fa6:	e054      	b.n	8003052 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d050      	beq.n	8003052 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fb0:	f7fe f9ea 	bl	8001388 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d902      	bls.n	8002fc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d13d      	bne.n	8003042 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fde:	d111      	bne.n	8003004 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe8:	d004      	beq.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff2:	d107      	bne.n	8003004 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300c:	d10f      	bne.n	800302e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800302c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e017      	b.n	8003072 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3b01      	subs	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	429a      	cmp	r2, r3
 8003060:	bf0c      	ite	eq
 8003062:	2301      	moveq	r3, #1
 8003064:	2300      	movne	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	429a      	cmp	r2, r3
 800306e:	d19b      	bne.n	8002fa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000004 	.word	0x20000004

08003080 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <SPI_EndRxTxTransaction+0x7c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <SPI_EndRxTxTransaction+0x80>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0d5b      	lsrs	r3, r3, #21
 8003098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800309c:	fb02 f303 	mul.w	r3, r2, r3
 80030a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030aa:	d112      	bne.n	80030d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2200      	movs	r2, #0
 80030b4:	2180      	movs	r1, #128	; 0x80
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff ff5a 	bl	8002f70 <SPI_WaitFlagStateUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f043 0220 	orr.w	r2, r3, #32
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e00f      	b.n	80030f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3b01      	subs	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e8:	2b80      	cmp	r3, #128	; 0x80
 80030ea:	d0f2      	beq.n	80030d2 <SPI_EndRxTxTransaction+0x52>
 80030ec:	e000      	b.n	80030f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80030ee:	bf00      	nop
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000004 	.word	0x20000004
 8003100:	165e9f81 	.word	0x165e9f81

08003104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e044      	b.n	80031a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d018      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x6c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d013      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x6c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00e      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x6c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a19      	ldr	r2, [pc, #100]	; (80031bc <HAL_TIM_Base_Start_IT+0xb8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x6c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x6c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d111      	bne.n	8003194 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b06      	cmp	r3, #6
 8003180:	d010      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	e007      	b.n	80031a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40000c00 	.word	0x40000c00
 80031c4:	40014000 	.word	0x40014000

080031c8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e041      	b.n	800325e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fd fff6 	bl	80011e0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 f9c4 	bl	8003594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b02      	cmp	r3, #2
 800327a:	d122      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d11b      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f06f 0202 	mvn.w	r2, #2
 8003292:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f955 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 80032ae:	e005      	b.n	80032bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f947 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f958 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d122      	bne.n	8003316 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d11b      	bne.n	8003316 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f06f 0204 	mvn.w	r2, #4
 80032e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f92b 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 8003302:	e005      	b.n	8003310 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f91d 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f92e 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b08      	cmp	r3, #8
 8003322:	d122      	bne.n	800336a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b08      	cmp	r3, #8
 8003330:	d11b      	bne.n	800336a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f06f 0208 	mvn.w	r2, #8
 800333a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2204      	movs	r2, #4
 8003340:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f901 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 8003356:	e005      	b.n	8003364 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f8f3 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f904 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d122      	bne.n	80033be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b10      	cmp	r3, #16
 8003384:	d11b      	bne.n	80033be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f06f 0210 	mvn.w	r2, #16
 800338e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2208      	movs	r2, #8
 8003394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f8d7 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 80033aa:	e005      	b.n	80033b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f8c9 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f8da 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10e      	bne.n	80033ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f06f 0201 	mvn.w	r2, #1
 80033e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f8a3 	bl	8003530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d10e      	bne.n	8003416 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b80      	cmp	r3, #128	; 0x80
 8003404:	d107      	bne.n	8003416 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800340e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fb95 	bl	8003b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d10e      	bne.n	8003442 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d107      	bne.n	8003442 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800343a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f89f 	bl	8003580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b20      	cmp	r3, #32
 800344e:	d10e      	bne.n	800346e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b20      	cmp	r3, #32
 800345c:	d107      	bne.n	800346e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f06f 0220 	mvn.w	r2, #32
 8003466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fb5f 	bl	8003b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003492:	2302      	movs	r3, #2
 8003494:	e048      	b.n	8003528 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d839      	bhi.n	8003518 <HAL_TIM_OC_ConfigChannel+0xa0>
 80034a4:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80034a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034aa:	bf00      	nop
 80034ac:	080034e1 	.word	0x080034e1
 80034b0:	08003519 	.word	0x08003519
 80034b4:	08003519 	.word	0x08003519
 80034b8:	08003519 	.word	0x08003519
 80034bc:	080034ef 	.word	0x080034ef
 80034c0:	08003519 	.word	0x08003519
 80034c4:	08003519 	.word	0x08003519
 80034c8:	08003519 	.word	0x08003519
 80034cc:	080034fd 	.word	0x080034fd
 80034d0:	08003519 	.word	0x08003519
 80034d4:	08003519 	.word	0x08003519
 80034d8:	08003519 	.word	0x08003519
 80034dc:	0800350b 	.word	0x0800350b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f8d4 	bl	8003694 <TIM_OC1_SetConfig>
      break;
 80034ec:	e017      	b.n	800351e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f933 	bl	8003760 <TIM_OC2_SetConfig>
      break;
 80034fa:	e010      	b.n	800351e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f998 	bl	8003838 <TIM_OC3_SetConfig>
      break;
 8003508:	e009      	b.n	800351e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f9fb 	bl	800390c <TIM_OC4_SetConfig>
      break;
 8003516:	e002      	b.n	800351e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
      break;
 800351c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003526:	7dfb      	ldrb	r3, [r7, #23]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a34      	ldr	r2, [pc, #208]	; (8003678 <TIM_Base_SetConfig+0xe4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00f      	beq.n	80035cc <TIM_Base_SetConfig+0x38>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b2:	d00b      	beq.n	80035cc <TIM_Base_SetConfig+0x38>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a31      	ldr	r2, [pc, #196]	; (800367c <TIM_Base_SetConfig+0xe8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d007      	beq.n	80035cc <TIM_Base_SetConfig+0x38>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a30      	ldr	r2, [pc, #192]	; (8003680 <TIM_Base_SetConfig+0xec>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0x38>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a2f      	ldr	r2, [pc, #188]	; (8003684 <TIM_Base_SetConfig+0xf0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d108      	bne.n	80035de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a25      	ldr	r2, [pc, #148]	; (8003678 <TIM_Base_SetConfig+0xe4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01b      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ec:	d017      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a22      	ldr	r2, [pc, #136]	; (800367c <TIM_Base_SetConfig+0xe8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a21      	ldr	r2, [pc, #132]	; (8003680 <TIM_Base_SetConfig+0xec>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00f      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a20      	ldr	r2, [pc, #128]	; (8003684 <TIM_Base_SetConfig+0xf0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00b      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a1f      	ldr	r2, [pc, #124]	; (8003688 <TIM_Base_SetConfig+0xf4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a1e      	ldr	r2, [pc, #120]	; (800368c <TIM_Base_SetConfig+0xf8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <TIM_Base_SetConfig+0xfc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d108      	bne.n	8003630 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a08      	ldr	r2, [pc, #32]	; (8003678 <TIM_Base_SetConfig+0xe4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d103      	bne.n	8003664 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	615a      	str	r2, [r3, #20]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40010000 	.word	0x40010000
 800367c:	40000400 	.word	0x40000400
 8003680:	40000800 	.word	0x40000800
 8003684:	40000c00 	.word	0x40000c00
 8003688:	40014000 	.word	0x40014000
 800368c:	40014400 	.word	0x40014400
 8003690:	40014800 	.word	0x40014800

08003694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f023 0201 	bic.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0303 	bic.w	r3, r3, #3
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f023 0302 	bic.w	r3, r3, #2
 80036dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a1c      	ldr	r2, [pc, #112]	; (800375c <TIM_OC1_SetConfig+0xc8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10c      	bne.n	800370a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0308 	bic.w	r3, r3, #8
 80036f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a13      	ldr	r2, [pc, #76]	; (800375c <TIM_OC1_SetConfig+0xc8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d111      	bne.n	8003736 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	621a      	str	r2, [r3, #32]
}
 8003750:	bf00      	nop
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	40010000 	.word	0x40010000

08003760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f023 0210 	bic.w	r2, r3, #16
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 0320 	bic.w	r3, r3, #32
 80037aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <TIM_OC2_SetConfig+0xd4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10d      	bne.n	80037dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a15      	ldr	r2, [pc, #84]	; (8003834 <TIM_OC2_SetConfig+0xd4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d113      	bne.n	800380c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	621a      	str	r2, [r3, #32]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40010000 	.word	0x40010000

08003838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0303 	bic.w	r3, r3, #3
 800386e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <TIM_OC3_SetConfig+0xd0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10d      	bne.n	80038b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800389c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <TIM_OC3_SetConfig+0xd0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d113      	bne.n	80038e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	621a      	str	r2, [r3, #32]
}
 80038fc:	bf00      	nop
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40010000 	.word	0x40010000

0800390c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	031b      	lsls	r3, r3, #12
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a10      	ldr	r2, [pc, #64]	; (80039a8 <TIM_OC4_SetConfig+0x9c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d109      	bne.n	8003980 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	621a      	str	r2, [r3, #32]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40010000 	.word	0x40010000

080039ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e050      	b.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d013      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d10c      	bne.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40000c00 	.word	0x40000c00
 8003a84:	40014000 	.word	0x40014000

08003a88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e03d      	b.n	8003b20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <__libc_init_array>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	4d0d      	ldr	r5, [pc, #52]	; (8003b8c <__libc_init_array+0x38>)
 8003b58:	4c0d      	ldr	r4, [pc, #52]	; (8003b90 <__libc_init_array+0x3c>)
 8003b5a:	1b64      	subs	r4, r4, r5
 8003b5c:	10a4      	asrs	r4, r4, #2
 8003b5e:	2600      	movs	r6, #0
 8003b60:	42a6      	cmp	r6, r4
 8003b62:	d109      	bne.n	8003b78 <__libc_init_array+0x24>
 8003b64:	4d0b      	ldr	r5, [pc, #44]	; (8003b94 <__libc_init_array+0x40>)
 8003b66:	4c0c      	ldr	r4, [pc, #48]	; (8003b98 <__libc_init_array+0x44>)
 8003b68:	f000 f820 	bl	8003bac <_init>
 8003b6c:	1b64      	subs	r4, r4, r5
 8003b6e:	10a4      	asrs	r4, r4, #2
 8003b70:	2600      	movs	r6, #0
 8003b72:	42a6      	cmp	r6, r4
 8003b74:	d105      	bne.n	8003b82 <__libc_init_array+0x2e>
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
 8003b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7c:	4798      	blx	r3
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7ee      	b.n	8003b60 <__libc_init_array+0xc>
 8003b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b86:	4798      	blx	r3
 8003b88:	3601      	adds	r6, #1
 8003b8a:	e7f2      	b.n	8003b72 <__libc_init_array+0x1e>
 8003b8c:	08003be4 	.word	0x08003be4
 8003b90:	08003be4 	.word	0x08003be4
 8003b94:	08003be4 	.word	0x08003be4
 8003b98:	08003be8 	.word	0x08003be8

08003b9c <memset>:
 8003b9c:	4402      	add	r2, r0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <memset+0xa>
 8003ba4:	4770      	bx	lr
 8003ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8003baa:	e7f9      	b.n	8003ba0 <memset+0x4>

08003bac <_init>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	bf00      	nop
 8003bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb2:	bc08      	pop	{r3}
 8003bb4:	469e      	mov	lr, r3
 8003bb6:	4770      	bx	lr

08003bb8 <_fini>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr
